import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import org.optaplanner.training.workerrostering.domain.Employee;
import org.optaplanner.training.workerrostering.domain.ShiftAssignment;
//import org.optaplanner.training.workerrostering.domain.Spot;

//Uncomment this line to make normal error

//dialect "mvel"

global HardSoftScoreHolder scoreHolder;



rule "Required skill for a shift"
when

    ShiftAssignment( employee!= null, $employee: employee,  $skill: spot.requiredSkill)
    
    Employee ( this == $employee, skillSet not contains $skill )

then

    scoreHolder.addHardConstraintMatch(kcontext, -1 );
    

end

rule "Unavailable time slots for an employee"
when

    ShiftAssignment( employee!= null, $employee: employee,  $timeSlot: timeSlot)
    
    Employee ( this == $employee, unavailableTimeSlotSet contains $timeSlot)

then

    scoreHolder.addHardConstraintMatch(kcontext, -1 );
    
end

rule "At most one shift assignment per day per employee"
when

         $employee: Employee()
         
         $one: ShiftAssignment( employee ==  $employee )
         
         ShiftAssignment( this != $one, employee == $employee, timeSlot.startDateTime.dayOfYear == $one.timeSlot.startDateTime.dayOfYear)
     
then

     scoreHolder.addHardConstraintMatch(kcontext, -1 );
         
end

rule "No 2 shifts within 10 hours from each other"
when

         $employee: Employee()
         
         $one: ShiftAssignment( employee ==  $employee )
         
         ShiftAssignment( this != $one, employee == $employee, timeSlot.endDateTime.plusHours(10) >= $one.timeSlot.startDateTime, timeSlot.startDateTime < $one.timeSlot.startDateTime )

then
     scoreHolder.addHardConstraintMatch(kcontext, -1 );
end

rule "Fairness: all employees should work about the same number of shifts"
when
		
		$employee: Employee ( )
		
		accumulate(
			ShiftAssignment(
			    employee == $employee
			);
			$count: count()
		)
	then
	    scoreHolder.addSoftConstraintMatch(kcontext, -($count.intValue()*$count.intValue()));
end

rule "Affinity: assign an employee to the same spot as much as possible"
when

        $employee: Employee()
        $spot: Spot()
        
        accumulate(
		   	 ShiftAssignment(
			      spot == $spot,
			      employee == $employee
			 );
			$count: count()
		)
then
	    scoreHolder.addSoftConstraintMatch(kcontext, $count.intValue()*$count.intValue());

end






